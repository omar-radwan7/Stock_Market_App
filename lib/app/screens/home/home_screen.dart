import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:fl_chart/fl_chart.dart';
import '../../providers/portfolio_provider.dart';
import '../../providers/stock_provider.dart';
import '../../services/portfolio_service.dart';
import '../../services/stock_service.dart';
import '../../screens/profile/profile.dart';
import '../../screens/stocks/stock_detail_screen.dart';

void main() {
  runApp(const FigmaToCodeApp());
}

// Generated by: https://www.figma.com/community/plugin/842128343887142055/
class FigmaToCodeApp extends StatelessWidget {
  const FigmaToCodeApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
      home: Scaffold(body: ListView(children: [Homepage()])),
    );
  }
}

class Homepage extends StatefulWidget {
  const Homepage({super.key});

  @override
  State<Homepage> createState() => _HomepageState();
}

class _HomepageState extends State<Homepage> {
  final List<Map<String, dynamic>> stocks = [
    {
      'symbol': 'AAPL',
      'name': 'Apple Inc.',
      'price': 459.67,
      'change': 2.4,
      'isPositive': true,
      'image': 'https://s3-symbol-logo.tradingview.com/apple.svg',
      'chartData': [
        FlSpot(0, 450),
        FlSpot(1, 438),
        FlSpot(2, 445),
        FlSpot(3, 452),
        FlSpot(4, 459.67),
      ],
    },
    {
      'symbol': 'GOOGL',
      'name': 'Alphabet Inc.',
      'price': 142.89,
      'change': -1.2,
      'isPositive': false,
      'image': 'https://s3-symbol-logo.tradingview.com/alphabet.svg',
      'chartData': [
        FlSpot(0, 148),
        FlSpot(1, 146),
        FlSpot(2, 144),
        FlSpot(3, 143),
        FlSpot(4, 142.89),
      ],
    },
    {
      'symbol': 'TSLA',
      'name': 'Tesla, Inc.',
      'price': 238.45,
      'change': 3.1,
      'isPositive': true,
      'image': 'https://s3-symbol-logo.tradingview.com/tesla.svg',
      'chartData': [
        FlSpot(0, 220),
        FlSpot(1, 225),
        FlSpot(2, 230),
        FlSpot(3, 235),
        FlSpot(4, 238.45),
      ],
    },
    {
      'symbol': 'META',
      'name': 'Meta Platforms Inc.',
      'price': 312.81,
      'change': -0.8,
      'isPositive': false,
      'image': 'https://s3-symbol-logo.tradingview.com/meta.svg',
      'chartData': [
        FlSpot(0, 318),
        FlSpot(1, 316),
        FlSpot(2, 315),
        FlSpot(3, 314),
        FlSpot(4, 312.81),
      ],
    },
  ];

  final ScrollController _scrollController = ScrollController();
  bool _showTitle = false;

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_onScroll);
    // Fetch data when the widget is initialized
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<PortfolioProvider>().fetchPortfolio();
      context.read<StockProvider>().fetchStocks();
    });
  }

  @override
  void dispose() {
    _scrollController.removeListener(_onScroll);
    _scrollController.dispose();
    super.dispose();
  }

  void _onScroll() {
    if (_scrollController.offset > 100 && !_showTitle) {
      setState(() => _showTitle = true);
    } else if (_scrollController.offset <= 100 && _showTitle) {
      setState(() => _showTitle = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [Colors.black.withOpacity(0.4), Colors.transparent],
            ),
          ),
        ),
        title: AnimatedOpacity(
          opacity: _showTitle ? 1.0 : 0.0,
          duration: const Duration(milliseconds: 300),
          child: const Text(
            'Portfolio Overview',
            style: TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontFamily: 'Barlow',
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
        centerTitle: true,
      ),
      body: Stack(
        children: [
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Theme.of(context).colorScheme.primary,
                  Theme.of(context).colorScheme.background,
                  Theme.of(context).colorScheme.surface,
                ],
                stops: const [0.0, 0.5, 1.0],
              ),
            ),
          ),
          CustomScrollView(
            controller: _scrollController,
            slivers: [
              // Status Bar
              const SliverToBoxAdapter(child: SizedBox(height: 20)),
              // Main Content
              SliverToBoxAdapter(
                child: Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                      colors: [
                        Theme.of(context).colorScheme.primary,
                        Theme.of(context).colorScheme.background,
                        Theme.of(context).colorScheme.surface,
                      ],
                      stops: const [0.0, 0.5, 1.0],
                    ),
                  ),
                ),
              ),

              // Profile Section
              SliverToBoxAdapter(
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(20, 10, 20, 0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Welcome,',
                            style: TextStyle(
                              color: Colors.white70,
                              fontSize: 16,
                              fontFamily: 'Barlow',
                            ),
                          ),
                          Text(
                            'Ayzel',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 24,
                              fontFamily: 'Barlow',
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),

              // Portfolio Value Section
              SliverToBoxAdapter(
                child: Consumer<PortfolioProvider>(
                  builder: (context, provider, child) {
                    final summary = provider.summary;
                    if (provider.isLoading || summary == null) {
                      return const Center(
                        child: Padding(
                          padding: EdgeInsets.all(20.0),
                          child: CircularProgressIndicator(),
                        ),
                      );
                    }

                    return Padding(
                      padding: const EdgeInsets.fromLTRB(20, 30, 20, 20),
                      child: Column(
                        children: [
                          Text(
                            'total amount',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 11,
                              fontFamily: 'Barlow',
                              fontWeight: FontWeight.w600,
                              height: 1.36,
                            ),
                          ),
                          const SizedBox(height: 10),
                          Text(
                            '\$${summary.total.toStringAsFixed(2)}',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 48,
                              fontFamily: 'Barlow',
                              fontWeight: FontWeight.w600,
                              height: 1.36,
                              shadows: [
                                Shadow(
                                  offset: Offset(8, 8),
                                  blurRadius: 4,
                                  color: Color(0xFF000000).withOpacity(0.25),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(height: 10),
                          Text.rich(
                            TextSpan(
                              children: [
                                TextSpan(
                                  text: 'Profit:      ',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 12,
                                    fontFamily: 'Barlow',
                                    fontWeight: FontWeight.w600,
                                    height: 1.36,
                                  ),
                                ),
                                TextSpan(
                                  text:
                                      '${summary.profitPercent >= 0 ? '+' : ''}${summary.profitPercent.toStringAsFixed(2)}%',
                                  style: TextStyle(
                                    color: Color(0xFF3DE85F),
                                    fontSize: 12,
                                    fontFamily: 'Barlow',
                                    fontWeight: FontWeight.w600,
                                    height: 1.36,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                ),
              ),

              // Watchlist
              SliverToBoxAdapter(
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(20, 30, 20, 10),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Most Active',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 20,
                          fontFamily: 'Barlow',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        'See All',
                        style: TextStyle(
                          color: Theme.of(context).colorScheme.secondary,
                          fontSize: 16,
                          fontFamily: 'Barlow',
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              Consumer<StockProvider>(
                builder: (context, stockProvider, child) {
                  if (stockProvider.isLoading) {
                    return const SliverToBoxAdapter(
                      child: Center(child: CircularProgressIndicator()),
                    );
                  }

                  if (stockProvider.errorMessage != null) {
                    return SliverToBoxAdapter(
                      child: Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(
                              stockProvider.errorMessage!,
                              style: const TextStyle(
                                color: Colors.white70,
                                fontSize: 16,
                              ),
                              textAlign: TextAlign.center,
                            ),
                            const SizedBox(height: 16),
                            ElevatedButton(
                              onPressed: () => stockProvider.fetchStocks(),
                              child: const Text('Retry'),
                            ),
                          ],
                        ),
                      ),
                    );
                  }

                  final activeStocks = stockProvider.mostActive;
                  if (activeStocks.isEmpty) {
                    return const SliverToBoxAdapter(
                      child: Center(
                        child: Text(
                          'No stocks available',
                          style: TextStyle(color: Colors.white70, fontSize: 16),
                        ),
                      ),
                    );
                  }

                  return SliverList(
                    delegate: SliverChildBuilderDelegate((context, index) {
                      final stock = activeStocks[index];
                      return Padding(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 20,
                          vertical: 8,
                        ),
                        child: _buildStockItem(stock),
                      );
                    }, childCount: activeStocks.length),
                  );
                },
              ),

              // Action Buttons
              SliverToBoxAdapter(
                child: Padding(
                  padding: const EdgeInsets.all(20.0),
                  child: Row(
                    children: [
                      Expanded(
                        child: ElevatedButton(
                          onPressed: () {
                            // Handle withdraw action
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor:
                                Theme.of(context).colorScheme.surface,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 16),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                              side: BorderSide(
                                color: Colors.white.withOpacity(0.2),
                                width: 1,
                              ),
                            ),
                          ),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(Icons.account_balance_wallet, size: 24),
                              SizedBox(width: 8),
                              Text(
                                'Withdraw',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: ElevatedButton(
                          onPressed: () {
                            // Handle trade action
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor:
                                Theme.of(context).colorScheme.secondary,
                            foregroundColor: Colors.black,
                            padding: const EdgeInsets.symmetric(vertical: 16),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(Icons.trending_up, size: 24),
                              SizedBox(width: 8),
                              Text(
                                'Trade',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStockItem(Map<String, dynamic> stock) {
    final double change =
        (stock['changesPercentage'] as num?)?.toDouble() ?? 0.0;
    final double price = (stock['price'] as num?)?.toDouble() ?? 0.0;
    final String symbol = stock['symbol'] as String? ?? 'N/A';
    final String name = stock['name'] as String? ?? 'Unknown';
    final bool isPositive = change >= 0;
    final chartColor = isPositive ? const Color(0xFF3DE85F) : Colors.red;

    return GestureDetector(
      onTap: () {
        Navigator.of(context).push(
          MaterialPageRoute(
            builder:
                (context) => StockDetailScreen(
                  symbol: symbol,
                  name: name,
                  price: price,
                  change: change,
                  imageUrl:
                      'https://financialmodelingprep.com/image-stock/$symbol.png',
                ),
          ),
        );
      },
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.black.withOpacity(0.2),
          borderRadius: BorderRadius.circular(20),
        ),
        child: Row(
          children: [
            CircleAvatar(
              backgroundImage: NetworkImage(
                'https://financialmodelingprep.com/image-stock/$symbol.png',
              ),
              backgroundColor: Colors.black.withOpacity(0.2),
              onBackgroundImageError: (_, __) => const Icon(Icons.business),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    symbol,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    name,
                    style: TextStyle(
                      color: Colors.white.withOpacity(0.7),
                      fontSize: 14,
                    ),
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text(
                    '\$${price.toStringAsFixed(2)}',
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    '${isPositive ? '+' : ''}${change.toStringAsFixed(2)}%',
                    style: TextStyle(
                      color: chartColor,
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
